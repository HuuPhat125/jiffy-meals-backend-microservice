pipeline {
    agent any
    tools {
        maven 'maven' // Ensure 'maven' matches the Maven installation name in Jenkins
    }
    environment {
        DEPLOYMENT_ENVIRONMENT = 'main'
        APP_ENV = 'default'
        GLOBAL_ENVIRONMENT = 'main'
    }
    stages {
        stage('Build') {
            steps {
                echo 'Building for main environment...'
                script {
                    sh 'cd config-server && mvn clean package -DskipTests'
                }
            }
        }
        stage('Code Analysis') {
            steps {
                script {
                    withSonarQubeEnv('sonarsql') {
                        echo "Running SonarQube analysis"
                        dir('config-server') {
                            sh 'mvn sonar:sonar'
                        }
                    }
                }
            }
        }
        stage('Publish Image') {
            steps {
                script {
                    echo "Publishing Docker image for main environment..."
                    sh 'cd config-server && docker build -t huuphat125/config-server .'

                    withCredentials([string(credentialsId: 'docker_cred', variable: 'dockerpwd')]) {
                        sh "docker login -u huuphat125 -p ${dockerpwd}"
                        sh "docker push huuphat125/config-server"
                    }

                    echo "Image published successfully"
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    echo "Deploying to Kubernetes (main environment)..."
                    kubeconfig(credentialsId: 'kubefile', serverUrl: 'https://192.168.49.2:8443') {
                        sh 'kubectl version --client'
                        sh 'kubectl apply -f config-server/deployment.yaml'
                        sh 'kubectl get pods --namespace jiffymeals'
                        sh 'kubectl get svc --namespace jiffymeals'
                    }
                    echo "Deployment to Kubernetes was successful"
                }
            }
        }
    }
}
